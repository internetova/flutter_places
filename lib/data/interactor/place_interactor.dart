import 'package:places/data/api/api_client.dart';
import 'package:places/data/local_storage/local_storage.dart';
import 'package:places/data/model/ui_place.dart';
import 'package:places/data/model/place.dart';
import 'package:places/data/model/search_filter.dart';
import 'package:places/data/repository/api_place_repository.dart';
import 'package:places/data/repository/local_place_repository.dart';
import 'package:places/domain/card_type.dart';

/// ‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è
/// –¢–∞–∫ –∫–∞–∫ —è —Ä–∞–Ω–µ–µ –Ω–µ –∏–º–µ–ª–∞ –æ–ø—ã—Ç–∞ —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Ç—å—é –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∞—Å–ø–µ–∫—Ç—ã –º–Ω–µ –¥–æ –∫–æ–Ω—Ü–∞
/// –Ω–µ –ø–æ–Ω—è—Ç–Ω—ã –∏ –ø–æ—ç—Ç–æ–º—É, –≤–µ—Ä–æ—è—Ç–Ω–æ, —è –¥–µ–ª–∞—é —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫.
//
// –í–æ–ø—Ä–æ—Å—ã –¥—É–±–ª–∏—Ä—É—é —Ç—É—Ç, —á—Ç–æ–±—ã –Ω–µ –∑–∞–±—ã–ª–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å! ü§ó
//
// 1. –ö–æ–≥–¥–∞ –º—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Å—Ä–∞–∑—É –∏–∑ —Å–µ—Ç–∏, –∏–ª–∏
// –∏—Ö —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–¥–æ –ø–æ–ª—É—á–∏—Ç—å, –ø–æ—Ç–æ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ø–∞–º—è—Ç—å (–±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –µ—â—ë –∫—É–¥–∞)
// –∏ –æ—Ç—Ç—É–¥–∞ —É–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é?

// 2. –ö–æ–≥–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –ò–∑–±—Ä–∞–Ω–Ω–æ–µ –º—ã –¥–æ–ª–∂–Ω—ã
// —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å –ø–æ—Å—Ç—É–ø–∞—é—â–∏–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–µ—Ç–∏ —Å–æ —Å–ø–∏—Å–∫–æ–º –ò–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –Ω–∞
// —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏–º–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –º–µ–Ω—è—Ç—å —ç—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –∑–Ω–∞—á–∏—Ç
// –≤—Å–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ —á—Ç–æ–±—ã –∏–º–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å
// —Å–¥–µ–ª–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ?

// 3. –ü—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –∏–∑ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π
// –∫–∞—Ä—Ç–æ—á–∫–∏, –∏–ª–∏ –Ω–∞–¥–æ –æ–ø—è—Ç—å –ø–æ–π—Ç–∏ –≤ —Å–µ—Ç—å –∏ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–µ—Ç–∏?

// 4. –°–ø–∏—Å–æ–∫ –ò–∑–±—Ä–∞–Ω–Ω–æ–≥–æ - —Ö—Ä–∞–Ω–∏—Ç—Å—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ö–æ–≥–¥–∞ –Ω–∞–¥–æ –æ–±–Ω–æ–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ
// –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–µ—Ç–∏? –ö–∞–∂–¥—ã–π —Ä–∞–∑ –ø—Ä–∏ –∑–∞—Ö–æ–¥–µ –≤ –ò–∑–±—Ä–∞–Ω–Ω–æ–µ?
// –ü—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É? –ü—Ä–∏ –Ω–æ–≤–æ–º –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è?

// 5. –ö–∞–∫ —á–∞—Å—Ç–æ –Ω–∞–¥–æ –æ–±–Ω–æ–≤–ª—è—Ç—å distance? –í–æ—Ç –ø–æ–ª—É—á–∏–ª–∞ —è —ç—Ç–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ —Å
// —Å–µ—Ä–≤–µ—Ä–∞, –Ω–æ –ø–æ–∑–∂–µ –æ–Ω–æ –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å—Å—è. –ï–≥–æ –Ω–∞–¥–æ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞—Ç—å
// –∏–ª–∏ –≤ –∫–∞–∫–æ–π-—Ç–æ –º–æ–º–µ–Ω—Ç?
//
// 6. –ü—Ä–∏ get –∑–∞–ø—Ä–æ—Å–µ –º–µ—Å—Ç –µ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
// count
// offset
// pageBy
// pageAfter
// pagePrior
// sortBy
//
// –ß—Ç–æ —ç—Ç–æ –∏ –∫ —á–µ–º—É —ç—Ç–æ? –Ø —Ç–∞–∫ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ —ç—Ç–æ –∫–∞–∫–∞—è-—Ç–æ —Ä–∞–∑–±–∏–≤–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã?
// –ü–æ–∫–∞ –æ–Ω–∞ –Ω–∏–≥–¥–µ –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∏ —á—Ç–æ —Å —ç—Ç–∏–º –¥–µ–ª–∞—Ç—å –Ω–µ –ø–æ–Ω—è—Ç–Ω–æ.
//
// –ö–æ—Ä–æ—á–µ, –º–Ω–µ –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è—Ç–Ω–∞ –ª–æ–≥–∏–∫–∞ –∫–∞–∫ —ç—Ç–æ –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å.
// –ü—Ä–æ—à—É –æ–±—ä—è—Å–Ω–∏—Ç—å –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º.
//
//
// –°–ø–∞—Å–∏–±–æ üßê
//--------------------------------------

/// –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–µ—Å—Ç–∞–º–∏
/// [apiRepository] –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–µ—Ç–∏
/// [localRepository] –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
class PlaceInteractor {
  PlaceInteractor();

  final ApiPlaceRepository apiRepository = ApiPlaceRepository(ApiClient());
  final LocalPlaceRepository localRepository = LocalPlaceRepository();

  /// —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –º–µ—Å—Ç
  /// –µ—Å–ª–∏ —é–∑–µ—Ä –Ω–µ –∑–∞–¥–∞–ª —Ñ–∏–ª—å—Ç—Ä, —Ç–æ –±–µ—Ä—ë–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π
  Future<List<UiPlace>> getPlaces({SearchFilter userFilter}) async {
    SearchFilter filter =
        userFilter == null ? LocalStorage.defaultSearchFilter : userFilter;

    /// –ø–æ–ª—É—á–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑ Api
    final places = await apiRepository.getPlaces(filter: filter);
    print('Interactor getPlaces (${places.length} —à—Ç.): $places');

    /// —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–ª–∏ –∏ –∑–∞–ø–∏—Å–∞–ª–∏ –≤ –∫—ç—à
    List<UiPlace> uiPlaces = await _transformApiPlaces(places);

    /// –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª–∏ –ø–æ —É–¥–∞–ª–µ–Ω–Ω–æ—Å—Ç–∏, –¥–∏—Å—Ç–∞–Ω—Ü–∏—é –æ—Ç–¥–∞–ª —Å–µ—Ä–≤–µ—Ä
    if (uiPlaces.length > 1) {
      uiPlaces.sort((a, b) => a.distance.compareTo(b.distance));
    }

    print('Interactor uiPlaces –∏–∑ –∫—ç—à–∞ (${uiPlaces.length} —à—Ç.): $uiPlaces');

    return uiPlaces;
  }

  /// ‚û° –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
  /// –æ—Ç–º–µ—á–∞–µ–º –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ
  /// —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–æ–π: –µ—Å–ª–∏ –≤ –Ω–µ–π –µ—Å—Ç—å, —Ç–æ —Å—Ç–∞–≤–∏–º –æ—Ç–º–µ—Ç–∫—É
  /// –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–∏–ø–∞ –≤ –∫—ç—à
  /// –¥–∞–ª—å—à–µ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ —Ä–∞–±–æ—Ç–∞–µ–º —Å UiPlace
  Future<List<UiPlace>> _transformApiPlaces(List<Place> apiPlaces) async {
    final localPlaces = await localRepository.getPlaces();
    List<UiPlace> uiPlaces;

    /// –µ—Å–ª–∏ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ –∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–µ—Ç, —Ç–æ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã
    /// –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ UiPlace
    if (localPlaces.length == 0) {
      uiPlaces = apiPlaces.map((place) => UiPlace.fromPlace(place)).toList();
    } else {
      /// –µ—Å–ª–∏ –µ—Å—Ç—å, —Ç–æ –ø—Ä–æ—Å—Ç–∞–≤–ª—è–µ–º –æ—Ç–º–µ—Ç–∫–∏ –ò–∑–±—Ä–∞–Ω–Ω–æ–µ / –∏–ª–∏ –Ω–µ—Ç
      uiPlaces = apiPlaces.map((place) {
        for (var i = 0; i < localPlaces.length; i++) {
          if (localPlaces[i].id == place.id) {
            return UiPlace.fromPlace(place, isFavorite: true);
          } else {
            return UiPlace.fromPlace(place);
          }
        }
      }).toList();
    }

    /// –µ—Å–ª–∏ –≤ –∫—ç—à–µ —É–∂–µ –µ—Å—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏, –æ—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (LocalStorage.cacheUIPlaces.length > 0) {
      LocalStorage.cacheUIPlaces.clear();
    }

    /// —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞ –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –ø–∞–º—è—Ç—å —Ç–∏–ø–∞ –∫—ç—à
    LocalStorage.cacheUIPlaces.addAll(uiPlaces);

    /// –≤–µ—Ä–Ω—ë–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã
    return LocalStorage.cacheUIPlaces;
  }

  /// –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Å—Ç–∞
  Future<Place> getPlaceDetails(int id) async {
    final place = await apiRepository.getPlaceDetail(id);
    print('Interactor getPlaceDetails: $place');

    return place;
  }

  /// –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
  Future<void> addNewPlace(Place place) async {
    final newPlace = await apiRepository.addNewPlace(place);
    print('Interactor addNewPlace: $newPlace');

    return newPlace;
  }

  /// —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Å—Ç
  /// —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–¥–∞–ª—ë–Ω–Ω–æ—Å—Ç–∏, –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
  Future<List<UiPlace>> getFavoritesPlaces() async {
    List<UiPlace> places = await localRepository.getPlaces();

    if (places.length > 1) {
      places.sort((a, b) => a.distance.compareTo(b.distance));
    }

    print('Interactor getFavoritesPlaces (${places.length} —à—Ç.): $places');

    return places;
  }

  /// –ò–∑–±—Ä–∞–Ω–Ω–æ–µ –≤–∫–ª–∞–¥–∫–∞ –•–æ—á—É –ø–æ—Å–µ—Ç–∏—Ç—å
  Future<List<UiPlace>> getPlannedPlaces() async {
    List<UiPlace> places = await localRepository.getPlaces();
    List<UiPlace> planed =
        places.where((place) => place.cardType == CardType.planned).toList();
    print('Interactor getPlannedPlaces $planed');

    return planed;
  }

  /// –ò–∑–±—Ä–∞–Ω–Ω–æ–µ –≤–∫–ª–∞–¥–∫–∞ –ü–æ—Å–µ—â—ë–Ω–Ω—ã–µ –º–µ—Å—Ç–∞
  Future<List<UiPlace>> getVisitedPlaces() async {
    List<UiPlace> places = await localRepository.getPlaces();
    List<UiPlace> visited =
        places.where((place) => place.cardType == CardType.visited).toList();
    print('Interactor getVisitedPlaces $visited');

    return visited;
  }

  /// –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ—Å—Ç–∞
  /// –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –æ–±—ã—á–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
  /// –∏ —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –ø–∞–º—è—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  /// ‚ÄºÔ∏è‚ùì‚ùì –Ω–∞–≤–µ—Ä–Ω–æ–µ –Ω–∞–¥–æ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞—Ç—è–Ω—É–≤ –Ω–æ–≤—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞?
  /// ‚ùì‚ùì –≤–¥—Ä—É–≥ —Ç–∞–º —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
  Future<UiPlace> getFavoritePlaceDetails(int id) async {
    final place = await localRepository.getPlaceDetail(id);
    final apiPlace = await apiRepository.getPlaceDetail(id);

    /// –æ–±–Ω–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –Ω–æ–≤—ã–µ
    UiPlace updatedPlace =
        UiPlace.updateFromApi(localPlace: place, apiPlace: apiPlace);

    /// –∑–∞–ø–∏—à–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await localRepository.updatePlace(updatedPlace);

    print('Interactor getFavoritePlaceDetails: $updatedPlace');

    return updatedPlace;
  }

  /// –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ –≤ —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
  /// ‚ùì –∞ –º–æ–∂–µ—Ç void? –¥–∞–ª—å—à–µ –ø–æ—Å–º–æ—Ç—Ä—é
  Future<UiPlace> addToFavorites(UiPlace place) async {
    final newPlace = await localRepository.addNewPlace(place);
    print('Interactor addToFavorites: $newPlace');

    return newPlace;
  }

  /// —É–¥–∞–ª–∏—Ç—å –º–µ—Å—Ç–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
  Future<void> removeFromFavorites(int id) async {
    await localRepository.removePlace(id);

    print('Interactor removeFromFavorites: $id');
  }

  /// –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –∫–Ω–æ–ø–∫–∏ –ò–∑–±—Ä–∞–Ω–Ω–æ–µ
  /// true - –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
  Future<bool> toggleFavorites(UiPlace place) async {
    final response = await localRepository.getPlaceDetail(place.id);

    if (response != null) {
      await removeFromFavorites(place.id);
      print('Interactor toggleFavorites: —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ ${place.id}');

      /// –ø–æ–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∞ –≤ –∫–æ–Ω—Å–æ–ª–∏
      getFavoritesPlaces();

      return false;
    } else {
      await addToFavorites(place);
      print('Interactor toggleFavorites: –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ ${place.id}');

      /// –ø–æ–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∞ –≤ –∫–æ–Ω—Å–æ–ª–∏
      getFavoritesPlaces();

      return true;
    }
  }

  /// –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–µ—â–µ–Ω–Ω—ã–µ –º–µ—Å—Ç–∞
  Future<List<UiPlace>> getVisitPlaces() async {
    final places = await getFavoritesPlaces();
    places.where((element) => element.cardType == CardType.visited);

    return places;
  }

  /// –¥–æ–±–∞–≤–∏—Ç—å –≤ –ø–æ—Å–µ—â–µ–Ω–Ω—ã–µ
  Future<void> addToVisitingPlaces(UiPlace place) async {
    final visitingPlace = UiPlace(
      id: place.id,
      lat: place.lat,
      lng: place.lng,
      name: place.name,
      urls: place.urls,
      placeType: place.placeType,
      description: place.description,
      distance: place.distance,
      cardType: CardType.visited,
      date: DateTime.now(),
    );

    await localRepository.updatePlace(visitingPlace);

    print('Interactor addToVisitingPlaces: $visitingPlace');
  }

  /// ‚û° –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
  /// –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –¥–∏—Å—Ç–∞–Ω—Ü–∏—é –¥–æ –º–µ—Å—Ç–∞
  /// –∫–æ–≥–¥–∞ –Ω–∞–¥–æ –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ,
  /// —Ç.–∫. —Å —Å–µ—Ä–≤–µ—Ä–∞ –¥–∏—Å—Ç–∞–Ω—Ü–∏—è —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é
  /// –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–º —Ñ–∏–ª—å—Ç—Ä–µ —Å—Ä–∞–∑—É –¥–ª—è —Å–ø–∏—Å–∫–∞ –º–µ—Å—Ç
  double getDistance() {
    return 100.0; //todo —Å–¥–µ–ª–∞—Ç—å –º–µ—Ç–æ–¥ —Ä–∞—Å—á–µ—Ç–∞
  }

  /// –ü–û–ò–°–ö
  /// —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤
  Future<void> saveKeywords(String keywords) async {
    localRepository.saveKeywords(keywords);
  }

  /// —É–¥–∞–ª–∏—Ç—å –∑–∞–ø—Ä–æ—Å
  Future<void> removeKeywords(int i) async {
    localRepository.removeKeywords(i);
  }

  /// –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é
  Future<void> clearSearchHistory() async {
    localRepository.clearSearchHistory();
  }

  /// –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤
  Future<List<String>> getSearchHistory() async {
    return localRepository.getSearchHistory();
  }
}
