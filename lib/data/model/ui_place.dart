import 'package:places/data/model/place.dart';
import 'package:places/domain/card_type.dart';

/// –∫–∞—Ä—Ç–æ—á–∫–∏, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–µ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ
/// –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è:
/// [cardType] - —Ñ–ª–∞–≥ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–µ (–Ω–∞ –ø–æ–∏—Å–∫–µ, –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º)
/// [date] - –¥–∞—Ç–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –∫–æ–≥–¥–∞ –ø–æ—Å–µ—Ç–∏–ª, –º–æ–∂–µ—Ç –±—ã—Ç—å null
/// —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
class UiPlace extends Place {
  final int id;
  final double lat;
  final double lng;
  final String name;
  final List<String> urls;
  final String placeType;
  final String description;
  final double? distance;
  final bool isFavorite;
  final CardType cardType;
  final DateTime? date;

  UiPlace({
    required this.id,
    required this.lat,
    required this.lng,
    required this.name,
    required this.urls,
    required this.placeType,
    required this.description,
    this.distance,
    this.isFavorite = false,
    this.cardType = CardType.search,
    this.date,
  }) : super(
          id: id,
          lat: lat,
          lng: lng,
          name: name,
          urls: urls,
          placeType: placeType,
          description: description,
        );

  /// –º–µ—Å—Ç–æ –∏–∑ api –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ –º–µ—Å—Ç–∞ –¥–ª—è ui
  static UiPlace fromPlace(Place place, {bool? isFavorite, CardType? cardType}) {
    return UiPlace(
      id: place.id,
      lat: place.lat,
      lng: place.lng,
      name: place.name,
      urls: place.urls,
      placeType: place.placeType,
      description: place.description,
      distance: place.distance,
      isFavorite: isFavorite != null ? isFavorite : false,
      cardType: cardType != null ? cardType : CardType.search,
    );
  }

  /// –∫–æ–ø–∏—Ä—É–µ–º –º–µ—Å—Ç–æ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
  /// –∏–∑–º–µ–Ω—è–µ–º isFavorite –Ω–∞ —Ç—Ä—É
  static UiPlace addFavorites(UiPlace place) {
    return UiPlace(
      id: place.id,
      lat: place.lat,
      lng: place.lng,
      name: place.name,
      urls: place.urls,
      placeType: place.placeType,
      description: place.description,
      distance: place.distance,
      isFavorite: true,
      cardType: CardType.planned,
    );
  }

  /// –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Å—Ç –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º –Ω–∞ —Å–ª—É—á–∞–π –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
  /// ‚ùì‚ùì –Ω–∞–¥–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –º–µ—Å—Ç–∞ –µ—Å–ª–∏ –æ–Ω–æ –º–æ–∂–µ—Ç
  /// –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –º–µ–Ω—è—Ç—å—Å—è? üëÄ –ø–æ–∫–∞ –æ—Å—Ç–∞–≤–ª—é —Å—Ç–∞—Ä–æ–µ
  /// todo: –≤–æ–ø—Ä–æ—Å —Å –¥–∏—Å—Ç–∞–Ω—Ü–∏–µ–π
  static UiPlace updateFromApi({
    required UiPlace localPlace,
    required Place apiPlace,
  }) {
    return UiPlace(
      id: localPlace.id,
      lat: apiPlace.lat,
      lng: apiPlace.lng,
      name: apiPlace.name,
      urls: apiPlace.urls,
      placeType: apiPlace.placeType,
      description: apiPlace.description,
      distance: localPlace.distance,
      isFavorite: localPlace.isFavorite,
      cardType: localPlace.cardType,
      date: localPlace.date,
    );
  }

  @override
  String toString() {
    String result = 'id: $id, isFavorite: $isFavorite, name: $name';
    if (distance != null) result += ' distance: $distance –º';

    return result;
  }
}
