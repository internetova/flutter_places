import 'package:flutter/material.dart';

import 'package:places/constant.dart';
import 'package:places/mocks.dart';
import 'package:places/domain/sight.dart';
import 'package:places/ui/screen/sight_card.dart';
import 'package:places/ui/screen/visiting_screen_constant.dart';
import 'package:places/components/bottom_NavigationBar.dart';

class VisitingScreen extends StatefulWidget {
  @override
  _VisitingScreenState createState() => _VisitingScreenState();
}

class _VisitingScreenState extends State<VisitingScreen> {
  @override
  Widget build(BuildContext context) {
    return DefaultTabController(
      length: 2,
      initialIndex: 0,
      child: Scaffold(
        appBar: AppBar(
          title: titleScreenFavorites,
          backgroundColor: Colors.transparent,
          bottom: PreferredSize(
            preferredSize: Size.fromHeight(60),
            child: Container(
              margin: EdgeInsets.symmetric(horizontal: 16, vertical: 6),
              height: 40,
              decoration: BoxDecoration(
                color: colorBackground,
                borderRadius: BorderRadius.circular(40),
              ),
              child: TabBar(
                indicator: BoxDecoration(
                  color: colorSecondary,
                  borderRadius: BorderRadius.circular(40),
                ),
                unselectedLabelColor: colorInactiveBlack,
                labelStyle: textStyleLabelFavorites,
                tabs: [
                  Tab(
                    text: tabPlanned,
                  ),
                  Tab(
                    text: tabVisited,
                  ),
                ],
                indicatorColor: Colors.transparent,
                indicatorWeight: 0.01,
              ),
            ),
          ),
          centerTitle: true,
          elevation: 0,
        ),
        body: TabBarView(
          children: [
            buildFavorites(data: mocks, typeCard: FavoritesCard.planned),
            buildFavorites(data: mocks, typeCard: FavoritesCard.visited),
          ],
        ),
        bottomNavigationBar: MainBottomNavigationBar(current: 2),
      ),
    );
  }
}

/// –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∫–æ–≥–¥–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–µ—Ç –≤ —Ä–∞–∑–¥–µ–ª–µ
class BlankScreen extends StatelessWidget {
  const BlankScreen(
      {Key key,
      @required this.icon,
      @required this.header,
      @required this.text})
      : super(key: key);
  final Widget icon;
  final Text header;
  final Text text;

  @override
  Widget build(BuildContext context) {
    return Center(
      child: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          icon,
          SizedBox(height: 24),
          header,
          SizedBox(height: 8),
          text,
        ],
      ),
    );
  }
}

/// —Å—Ç—Ä–æ–∏–º –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –ò–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
/// —É –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ –¥–∞–Ω–Ω—ã—Ö –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ –ü–æ—Å–µ—Ç–∏—Ç—å –∏–ª–∏ –ü–æ—Å–µ—Ç–∏–ª
/// ‚ÄºÔ∏èü§ìü§ì –∑–Ω–∞—é, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –∫–æ—Ä—è–≤–∞—è, –±–æ–ª–µ–µ –∏–∑—è—â–Ω–æ–≥–æ –≤ –≥–æ–ª–æ–≤—É –ø–æ–∫–∞ –Ω–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç
/// —É–≤–µ—Ä–µ–Ω–∞, —á—Ç–æ –æ–Ω–∞ –í–†–ï–ú–ï–ù–ù–ê–Ø, –ø–æ —Ö–æ–¥—É –±—É–¥—É —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏—Ç—å
Widget buildFavorites(
    {@required List<Sight> data, @required FavoritesCard typeCard}) {
  Widget favTabBarView;
  var favorites = <Sight>[];

  /// –∏—â–µ–º –≤ –±–∞–∑–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º —Ç–∏–ø–æ–º
  /// —Ö–æ—á—É –ø–æ—Å–µ—Ç–∏—Ç—å
  if (typeCard == FavoritesCard.planned) {
    favorites = data.where((item) => item.planned != null).toList();

    /// –µ—Å–ª–∏ –Ω–µ—Ç —Ç–∞–∫–∏—Ö, —Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    if (favorites.isEmpty) {
      favTabBarView = BlankScreen(
        icon: blankScreenIconPlanned,
        header: blankScreenHeaderPlanned,
        text: blankScreenTextPlanned,
      );
    } else {
      /// –∏–Ω–∞—á–µ –≤—ã–≤–æ–¥–∏–º –∫–∞—Ä—Ç–æ—á–∫–∏
      favTabBarView = BuildCardScreen(
        data: favorites,
        whereShowCard: WhereShowCard.planned,
      );
    }
  }

  /// –ø–æ—Å–µ—Ç–∏–ª
  if (typeCard == FavoritesCard.visited) {
    favorites = data.where((item) => item.visited != null).toList();

    if (favorites.isEmpty) {
      favTabBarView = BlankScreen(
        icon: blankScreenIconVisited,
        header: blankScreenHeaderVisited,
        text: blankScreenTextVisited,
      );
    } else {
      favTabBarView = BuildCardScreen(
        data: favorites,
        whereShowCard: WhereShowCard.visited,
      );
    }
  }

  return favTabBarView;
}
